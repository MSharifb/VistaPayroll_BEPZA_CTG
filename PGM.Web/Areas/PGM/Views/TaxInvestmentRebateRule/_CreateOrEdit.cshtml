@model PGM.Web.Areas.PGM.Models.TaxInvestmentRebateRule.TaxInvestmentRebateRuleMasterViewModel
@using PGM.Web.Helpers

<div class="GroupBox">
    @Html.HiddenFor(model => model.Id)
    @Html.HiddenFor(model => model.RebateRuleId)
    @Html.HiddenFor(model => model.strMode)

    <div class="row">
        <span class="label">
            @Html.LabelFor(model => model.IncomeYear)
            <label class="required-field">*</label>
        </span>
        <span class="field">
            @Html.DropDownListFor(m => m.IncomeYear, Model.IncomeYearList, @String.Format("{0}", Content.DDLOptionalLabel()), new { @class = "required" })
        </span>
        <span class="label-right">
            @Html.LabelFor(model => model.AssessmentYear)
        </span>
        <span class="field">
            @Html.TextBoxFor(m => m.AssessmentYear, new { @class = "read-only", @readonly = true })
        </span>
    </div>
    <div class="GroupBox">
        <legend>Investment Rebate Rule</legend>
        <div class="row">
            <span class="label">
                @Html.LabelFor(model => model.SlabNo)
            </span>
            <span class="field">
                @Html.TextBoxFor(model => model.SlabNo)
            </span>
            <span class="label-right">
                @Html.LabelFor(model => model.LowerLimit)
                <label class="required-field">*</label>
            </span>
            <span class="field">
                @Html.TextBoxFor(model => model.LowerLimit)
            </span>
        </div>
        <div class="row">
            <span class="label">
                @Html.LabelFor(model => model.UpperLimit)
            </span>
            <span class="field">
                @Html.EditorFor(model => model.UpperLimit)
            </span>
        </div>
    </div>
</div>
<div class="GroupBox">
    <div class="row">
        <input type="button" id="btnAddNewRuleDetail" value="+ Add Item" class="btn btn-primary" style="float:left" />

        <table id="grid" class="contenttable" width="70%">
            <thead>
                <tr>
                    <th>@Html.LabelFor(model => model.RuleDetail.FirstOrDefault().SlabNo)</th>
                    <th> @Html.LabelFor(model => model.RuleDetail.FirstOrDefault().LowerLimit)</th>
                    <th>@Html.LabelFor(model => model.RuleDetail.FirstOrDefault().UpperLimit)</th>
                    <th>@Html.LabelFor(model => model.RuleDetail.FirstOrDefault().RebateRate)</th>
                    <th>&nbsp;</th>
                </tr>
            </thead>
            <tbody>
                @{ if (Model.RuleDetail.Count() > 0) { Html.RenderPartial("_MasterDetail", Model); }}
            </tbody>
        </table>
    </div>
</div>
<div class="clear"></div>
<div class="GroupBox">
    <div class="button-crude" style="align-content:flex-start">
        @if ((new PGM.Web.Utility.AppConstant()).IsAddAssigned)
        {
            <input type="submit" value="Save" id="btnSave" name="btnSave" style="margin-right: 8px;" />
        }
        <input type="button" value="Clear" id="btnClear" name="btnClear" />
    </div>
</div>



<script type="text/javascript">
    var lastSlabNumber = 0;
    $(document).ready(function () {
        showErrMsg();
    });

    function showErrMsg() {
        if ('@Model.errClass' == "success" && '@Model.IsError' == "0") {
            $('input[name="btnSave"]').hide();
        }
    }

    $(function () {
        var Url = window.location.href;
        $("#btnClear").live("click", function (event) {
            event.preventDefault();
            window.location.href = Url;
        });
    });

    //Check string has null or empty
    var StringHasValue = function (strValue) {
        if ($.trim(strValue) != "" && $.trim(strValue) != null && $.trim(strValue) != undefined)
            return true;
        else
            return false;
    };


</script>

<script type="text/javascript">
    $('#btnClear').live('click', function () {
        document.getElementById('frm').reset();
        $('#btnAdd').show();
    })

    $("#btnAddNewRuleDetail").click(function () {
        ++lastSlabNumber;
        var url = '@Url.Action("AddRebateRuleDetail", "TaxInvestmentRebateRule")';
        $.ajax({
            url: url,
            type: 'POST',
            data: { SlabNo: lastSlabNumber },
            cache: false,
            success: function (html) {
                $('#grid tbody').append("<tr>" + html + "</tr>");
            }
        });

    });
    function UpdateSlabNumber() {
        var rowCount = $('#grid >tbody >tr').length;
        return rowCount;
    }

    $("#grid tbody tr a").live("click", function () {
        var parent = $(this).parent('td').parent('tr');
        parent.remove();
        lastSlabNumber--;
        RecalculateSerialNumber(parent);
        return false;

    })

    function RecalculateSerialNumber(currentRow) {
        var firstSerialNo = parseInt(1);
        var newSerialNumber = firstSerialNo;
        $('#grid tbody tr .slabNo :input').each(function () {
            //newSerialNumber = newSerialNumber;
            $(this).val(newSerialNumber++);
        });

    }

</script>

<script type="text/javascript">

    function RemoveDb(el, id, url) {
        if (confirm("Do you want to delete this Information?")) {
            if (id == 0 || id == undefined) {
                $(el).parent().parent().remove();
            }
            else {
                $.ajax({
                    url: url,
                    type: 'POST',
                    dataType: 'json',
                    data: JSON.stringify({ Id: id }),
                    contentType: "application/json; charset=utf-8",
                    error: function () {
                        $("#message").html("<div class=\"validation-summary-errors\" data-valmsg-summary=\"true\"> <span> System Error!</span>  </div> ");
                    },
                    success: function (result) {
                        var errMsg = result.Message;
                        var errg = result.Success;
                        if (errg) {
                            $("#message").html('<b style=\"color:Green\">' + errMsg + '</b>');
                            $(el).parent().parent().remove();
                        }
                        else {
                            $("#message").html('<b style=\"color:red\">' + errMsg + '</b>');
                        }
                    }
                });
            }
        }
    }

    $('#IncomeYear').live('change', function () {
        var incomeYear = $(this).val();
        incomeYear = incomeYear.split('-');
        $('#AssessmentYear').val((parseInt(incomeYear[0]) + 1) + '-' + (parseInt(incomeYear[1]) + 1));
    });

</script>


