
<script type="text/javascript">


    $(function () {

        $("a.deleteItem").live("click", function () {
            deleteLinkObj = $(this);  //for future use
            $('#delete-dialog').dialog('open');
            return false; // prevents the default behaviour
        });
    });

</script>

<script type="text/javascript">

    function handleDeleteSuccess() {
    }
    function handleDeleteFailure() {
        $("#message").html('There is an Ajax call back error!');
    }
    function JsonDelete_OnComplete(context) {
        var obj = eval("(" + context.responseText + ")");
        if (obj.Success) {
            $("#message").html("<b>" + obj.Message + "</b>").css("color", "Green");
            $('#sButton').trigger('click');
        }
        else {
            $("#message").html("<b>" + obj.Message + "</b>").css("color", "red");
        }
    }
     
</script> 

<script type="text/javascript">

    $(document).ready(function () {
        $('#jqGrid').jqGrid({
            url: '@Url.Action("GetList")',
            datatype: 'json',
            mtype: 'POST',
            colNames: ['ID', 'Year', 'Month', 'Payment', 'Edit'],
            colModel: [
                            { name: 'ID', index: 'ID', align: 'left', search: false, hidden: true, edittype: 'text' },                          
                            { name: 'SalaryYear', index: 'SalaryYear', align: 'center', search: true, edittype: 'select', surl: '@Url.Action("GetYearList")' },
                            { name: 'SalaryMonth', index: 'SalaryMonth', align: 'left', search: true, edittype: 'select', surl: '@Url.Action("GetMonthList")' },
                           
//                            { name: 'FromDate', index: 'FromDate', align: 'left', search: true, hidden: true, edittype: 'text' },
//                            { name: 'ToDate', index: 'ToDate', align: 'left', search: true, hidden: true, edittype: 'text' },
//                            { name: 'PaymentStatus', index: 'PaymentStatus', hidden: true, width: '90px', search: true, edittype: 'select', surl: '@Url.Action("GetPaymentStatusList")' },               
//                            
//                            { name: 'EmpID', index: 'EmpID', align: 'center', width: '80px', search: false, edittype: 'text' },
//                            { name: 'EmployeeInitial', index: 'EmployeeInitial', width: '50px', align: 'center', search: true, edittype: 'text' },
//                            { name: 'FullName', index: 'FullName', align: 'left', search: true, edittype: 'text' },

//                            { name: 'AccountNo', index: 'AccountNo', align: 'center', width: '80px', search: false, edittype: 'text' },

//                            { name: 'HeadAmount', index: 'HeadAmount', align: 'right', width: '80px', search: false, edittype: 'text', formatter: 'currency', formatoptions: { thousandsSeparator: ",", decimalPlaces: 2, prefix: "", suffix: "", defaultValue: '0.00'} },
//                            { name: 'PaymentDate', index: 'PaymentDate', width: '80px', align: 'center', search: false, edittype: 'text' },
                            { name: 'Payment', index: 'Payment', align: 'center', search: false, sortable: false, width: '50px', edittype: 'image', formatter: paymentformateadorLink },
                            { name: 'Edit', index: 'Edit', align: 'center', search: false, sortable: false, width: '50px', edittype: 'text', formatter: viewformatEdiorLink }
                          ],
            autowidth: true,
            caption: "Withheld Salary Payment Information",
            rowList: [20, 30, 40, 50, 100],
            pager: $('#jqGridPager'),
            rowNum: 20,
            sortname: 'ID',
            sortorder: 'asc',
            viewrecords: true,
            height: '100%',
            width: '50%'
        });
        // Pager Function
        $("#jqSearch").jqGrid('filterGrid', '#jqGrid', { gridModel: true, gridNames: true, formtype: 'horizontal', autosearch: true, enableSearch: true, enableClear: true });

    });
    function deleteformateadorLink(cellvalue, options, rowObject) {
        var url = '@Html.ActionLink(" ", "Delete", new { id = "_id_" }, new { @class = "deleteItem" })';
        url = url.replace(/_id_/, rowObject[0]);
        return url;
    }
    function viewformatEdiorLink(cellvalue, options, rowObject) {

        var url = '@Html.ActionLink(" ", "Edit", new { id = "_id_" }, new { @class = "payItem" })';
        //url = url.replace(/_name_/, cellvalue);
        url = url.replace(/_id_/, rowObject[0]);
        return url;
    }
    function paymentformateadorLink(cellvalue, options, rowObject) {

       var url = '@Html.ActionLink(" ", "Payment", new { id = "_id_" }, new { @class = "addItem" })';

       url = url.replace(/_id_/, rowObject[0]);

//        if (rowObject[11] != "")
//            return "";

        return url;
    }

//    function summaryGridDateFormatter(cellvalue, options, rowObject) {

//        // parseExact just returns 'null' if the date you are trying to 
//        // format is not in the exact format specified
//        var parsedDate = Date.parseExact(cellvalue, "yyyy-MM-ddTHH:mm:ss");

//        // if parsed date is null, just used the passed cell value; otherwise, 
//        // transform the date to desired format
//        var formattedDate = parsedDate ? parsedDate.toString("MM/dd/yyyy") : cellvalue;

//        return formattedDate;
//    }


//    $(function () {

    //        $('#sg_FromDate, #sg_ToDate').datepicker({ buttonImage: '@Url.Content("~/Content/Images/calendar-blue.gif")', dateFormat: 'yy-mm-dd', buttonImageOnly: true, showOn: "button", buttonText: 'Choose' })
//        .css({ 'width': '100px' });

//    }) 

   
</script>
